#include "../version/version.hpp"
#include <iostream>

void PrintVersion() { std::cout << SpinVersion << std::endl; }

void PrintHelp() {
  std::cout
      << "use: spin [-option] ... [-option] file\n"
      << "\tNote: file must always be the last argument\n"
      << "\t-A apply slicing algorithm\n"
      << "\t-a generate a verifier in pan.c\n"
      << "\t-B no final state details in simulations\n"
      << "\t-b don't execute printfs in simulation\n"
      << "\t-C print channel access info (combine with -g etc.)\n"
      << "\t-c columnated -s -r simulation output\n"
      << "\t-d produce symbol-table information\n"
      << "\t-Dyyy pass -Dyyy to the preprocessor\n"
      << "\t-Eyyy pass yyy to the preprocessor\n"
      << "\t-e compute synchronous product of multiple never claims (modified "
         "by -L)\n"
      << "\t-f \"..formula..\"  translate LTL "
      << "into never claim\n"
      << "\t-F file  like -f, but with the LTL formula stored in a 1-line "
         "file\n"
      << "\t-g print all global variables\n"
      << "\t-h at end of run, print value of seed for random nr generator "
         "used\n"
      << "\t-i interactive (random simulation)\n"
      << "\t-I show result of inlining and preprocessing\n"
      << "\t-J reverse eval order of nested unlesses\n"
      << "\t-jN skip the first N steps "
      << "in simulation trail\n"
      << "\t-k fname use the trailfile stored in file fname, see also -t\n"
      << "\t-L when using -e, use strict language intersection\n"
      << "\t-l print all local variables\n"
      << "\t-M generate msc-flow in tcl/tk format\n"
      << "\t-m lose msgs sent to full queues\n"
      << "\t-N fname use never claim stored in file fname\n"
      << "\t-nN seed for random nr generator\n"
      << "\t-O use old scope rules (pre 5.3.0)\n"
      << "\t-o1 turn off dataflow-optimizations in verifier\n"
      << "\t-o2 don't hide write-only variables in verifier\n"
      << "\t-o3 turn off statement merging in verifier\n"
      << "\t-o4 turn on rendezvous optiomizations in verifier\n"
      << "\t-o5 turn on case caching (reduces size of pan.m, but affects "
         "reachability reports)\n"
      << "\t-o6 revert to the old rules for interpreting priority tags (pre "
         "version 6.2)\n"
      << "\t-o7 revert to the old rules for semi-colon usage (pre version "
         "6.3)\n"
      << "\t-Pxxx use xxx for preprocessing\n"
      << "\t-p print all statements\n"
      << "\t-pp pretty-print (reformat) stdin, write stdout\n"
      << "\t-qN suppress io for queue N in printouts\n"
      << "\t-r print receive events\n"
      << "\t-replay  replay an error trail-file found earlier\n"
      << "\t	if the model contains embedded c-code, the ./pan executable is "
         "used\n"
      << "\t	otherwise spin itself is used to replay the trailfile\n"
      << "\t	note that pan recognizes different runtime options than spin "
         "itself\n"
      << "\t-run  (or -search) generate a verifier, and compile and run it\n"
      << "\t      options before -search are interpreted by spin to parse the "
         "input\n"
      << "\t      options following a -search are used to compile and run the "
         "verifier pan\n"
      << "\t	    valid options that can follow a -search argument "
         "include:\n"
      << "\t	    -bfs	perform a breadth-first search\n"
      << "\t	    -bfspar	perform a parallel breadth-first search\n"
      << "\t	    -dfspar	perform a parallel depth-first search, same as "
         "-DNCORE=4\n"
      << "\t	    -bcs	use the bounded-context-switching algorithm\n"
      << "\t	    -bitstate	or -bit, use bitstate storage\n"
      << "\t	    -biterateN,M use bitstate with iterative search refinement "
         "(-w18..-w35)\n"
      << "\t			perform N randomized runs and increment -w "
         "every M runs\n"
      << "\t			default value for N is 10, default for M is "
         "1\n"
      << "\t			(use N,N to keep -w fixed for all runs)\n"
      << "\t			(add -w to see which commands will be "
         "executed)\n"
      << "\t			(add -W if ./pan exists and need not be "
         "recompiled)\n"
      << "\t	    -swarmN,M like -biterate, but running all iterations in "
         "parallel\n"
      << "\t	    -link file.c  link executable pan to file.c\n"
      << "\t	    -collapse	use collapse state compression\n"
      << "\t	    -noreduce	do not use partial order reduction\n"
      << "\t	    -hc  	use hash-compact storage\n"
      << "\t	    -noclaim	ignore all ltl and never claims\n"
      << "\t	    -p_permute	use process scheduling order random "
         "permutation\n"
      << "\t	    -p_rotateN	use process scheduling order rotation by N\n"
      << "\t	    -p_reverse	use process scheduling order reversal\n"
      << "\t	    -rhash      randomly pick one of the -p_... options\n"
      << "\t	    -ltl p	verify the ltl property named p\n"
      << "\t	    -safety	compile for safety properties only\n"
      << "\t	    -i	    	use the dfs iterative shortening algorithm\n"
      << "\t	    -a	    	search for acceptance cycles\n"
      << "\t	    -l	    	search for non-progress cycles\n"
      << "\t	similarly, a -D... parameter can be specified to modify the "
         "compilation\n"
      << "\t	and any valid runtime pan argument can be specified for the "
         "verification\n"
      << "\t-S1 and -S2 separate pan source for claim and model\n"
      << "\t-s print send events\n"
      << "\t-T do not indent printf output\n"
      << "\t-t[N] follow [Nth] simulation trail, see also -k\n"
      << "\t-Uyyy pass -Uyyy to the preprocessor\n"
      << "\t-uN stop a simulation run after N steps\n"
      << "\t-v verbose, more warnings\n"
      << "\t-w very verbose (when combined with -l or -g)\n"
      << "\t-[XYZ] reserved for use by xspin interface\n"
      << "\t-V print version number and exit\n";
}